import AsyncLock from "async-lock";
import TaskBase from "./TaskBase";
import MBTiles from "@mapbox/mbtiles";
import stream from "stream"
import { dialog } from "electron";

const asyncLock = new AsyncLock();

export default class MBTilesTask extends TaskBase {
    constructor(task) {
        super(task);
        var _this = this;
        this._mbtiles = null;
        new MBTiles(this.path.replace("\\", "/"), function (err, mbtiles) {
            dialog.showErrorBox("路径", _this.path)
            if (err) {
                dialog.showErrorBox("错误", err.message)
            }
            _this._mbtiles = mbtiles;
        })
    }

    /**
     * 
     * @param {http.IncomingMessage} req 
     * @param {http.ServerResponse} res 
     * @param {Object} task
     * @param {fs.Stats} stats
     */
    static async Action(req, res, task, stats) {
        asyncLock.acquire('fileTask-size-write', function () {
            ++task.useData
        })
        if (req.url.split('/').pop() === "getMap") {
            MBTilesTask.GetMapTemplete(req, res, task)
            return;
        }
        MBTilesTask.GetTileRESTFul(req, res, task)
    }

    static GetMapTemplete(req, res, task) {
        task._mbtiles.getInfo(function (err, info) {
            var center = info.center;
            var minzoom = info.minzoom
            var maxzoom = info.maxzoom
            var htmlTemplete = `
<!DOCTYPE html>
<html>
<head>
  <title>Leaflet Preview</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.5.1/dist/leaflet.css"
   integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
   crossorigin=""/>
  <script src="https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"
   integrity="sha512-GffPMF3RvMeYyc1LWMHtK8EbPv0iNZ8/oTtHPx9/cc2ILxQ+u905qIwdpULaqDkyBKgOaB57QTMg7ztg8Jm2Og=="
   crossorigin=""></script>
  <style type="text/css">
    body {
       margin: 0;
       padding: 0;
    }
    html, body, #map{
       width: 100%;
       height: 100%;
    }
  </style>
</head>
<body>
  <div id="map"></div>
  <script>
      var map = L.map('map').setView([${center[1]}, ${center[0]}], ${center[2]});
      L.tileLayer('http://127.0.0.1:${req.headers.host.split(':').pop()}/${task.id}/{z}/{x}/{y}.png', {
        minZoom: ${minzoom},
        maxZoom: ${maxzoom},
        tms: false,
        attribution: 'Generated by WebPublish'
      }).addTo(map);
  </script>
</body>
</html>
        `
            res.end(htmlTemplete)
        })
    }

    /**
     * 
     * @param {*} req 
     * @param {http.ServerResponse} res 
     */
    static GetTileRESTFul(req, res, task) {
        var urlParam1 = req.url.split('.')
        var urlParam2 = urlParam1[0].split('/')
        var ext = urlParam1[1] || 'png'
        var z = urlParam2[2],
            x = urlParam2[3],
            y = urlParam2[4]

        task._mbtiles.getTile(z, x, y, function (err, data, headers) {
            if (err) {
                res.statusCode = 404;
                res.setHeader('Content-Type', 'text/javascript;charset=UTF-8');//utf8编码，防止中文乱码
                res.end("Tile rendering error: " + err)
                return;
            }
            res.setHeader('Content-Type', headers ? headers['Content-Type'] : "image/png")
            res.setHeader('Access-Control-Allow-Origin', "*")
            const bufferStream = new stream.PassThrough();
            bufferStream.end(data)
            bufferStream.pipe(res)
        })
    }

    Action(req, res, stats) {
        return MBTilesTask.Action(req, res, this, stats)
    }

    getUrl() {
        return '{z}/{x}/{y}.png'
    }
}